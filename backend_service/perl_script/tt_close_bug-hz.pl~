#!/usr/bin/perl
use strict;
use WWW::Mechanize;
use WWW::HtmlUnit;
use HTML::TableExtract qw(tree);

# base path
my $path     = "/home/junzheng_zhang/Desktop/kim/tags/hz/tags";
my $url_base = "http://192.168.88.187/tmtrack/";
my $topicApp = "AMAX_4.4";

my @projects = &getProject($path);

sub getProject() {
    ( my $path ) = @_;
    opendir( DIR, $path ) or die $!;
    my @projects;
    foreach ( readdir(DIR) ) {
        next if ( $_ eq '.' || $_ eq '..' );
        push @projects, $_;
    }
    close DIR;
    return @projects;
}

# Input Parameter
my $username   = $ARGV[0];
my $password   = $ARGV[1];
my $project    = $ARGV[2];
my $rd_manager = $ARGV[3];
my $developer  = $ARGV[4];
my $select     = $ARGV[5];

if ( $select ne "q" ) {
    my $path_project = "$path/$project";
    my $path_close   = "$path_project/close";

    # delete path directory
    if ( -e $path_close ) {
        system("rm -rf $path_close");
    }
    system("mkdir $path_close");

    my $mech = WWW::Mechanize->new( autocheck => 1 );
    $mech->credentials( $username, $password );

    my $webClient           = WWW::HtmlUnit->new;
    my $credentialsProvider = $webClient->getCredentialsProvider;
    $credentialsProvider->addCredentials( $username, $password );

    # Get all bug list by Firefox
    my $url_tt = $url_base . "tmtrack.dll?ReportPage&Template=reports%2Flist&TableId=1001&Target=Query&QueryName=-6&SolutionId=2&ShowSubLinks=1";
    $mech->get($url_tt);
    my $link = $mech->find_link( url_regex => qr/Recno=-1/ );
    if ( $link ne "" ) {
        $url_tt = $link->url();
    }
    
    if ( $select eq "-9" ) {
        print "Login Successfully\n";
    } else {
        my $path_parse_tt = $path_close . '/parse_tt.html';
        my $page_all_tt   = $webClient->getPage( $url_base . $url_tt );
        printFile( $page_all_tt->asXml, $path_parse_tt );

        my %hash = &getWebHash( $path_parse_tt, $path_close );
        &printHash( $path_close . '/parse_tt.csv', %hash );

        my $path_tag = $path_project . '/tags_format_' . $project . '_vendor_format.csv';

        # print "\n***** $path_tag\n\n";
        my %hash_tt = &getTTCloseHash( $path_tag, %hash );

        &printHash( $path_close . '/mapping_tt.csv', %hash_tt );

        my $num = 0;
        foreach my $key ( keys %hash_tt ) {
            if ( $hash_tt{$key} eq '1' ) {
                next;
            }

            my @p      = split( ",", $hash_tt{$key} );
            my $tt_id  = $key;
            my $tag    = $p[1];
            my $apk    = $p[2];
            my $cl     = $p[3];
            my $branch = $p[0];
            $branch =~ s/.*\[//;
            $branch =~ s/\]//;
            my $device_web = $hash{$tt_id};
            $device_web =~ s/ &.*//;

            if ( $device_web eq $topicApp ) {
                $cl  .= " ($topicApp)";
                $tag .= " ($topicApp)";
            }
        
            my $cl_apk = "ChangeLink: $cl\nAPK Version: $apk";
            $num++;

            #print "$num.\t$tt_id\t$tag\t$apk\t$cl\n\n";
            my @field = ( $tt_id, $tag, $apk, $cl, $device_web, $branch );
            &printCSV( $path_close . "/verify_tt.csv", @field );

            # Get Url in List Page
            my $url_list = $url_base
              . "tmtrack.dll?ReportPage&Template=reports%2Flist&incsub=1&keywords=$tt_id&options=0&searchtid=1001&solutionid=2&tableid=1001&target=QuickIdSearch";
            $mech->get($url_list);

            my $path_list = $path_close . '/list_' . $key . '.html';
            $mech->save_content( $path_list, binmode => ':encoding(utf8)' );

            # Goto Detail Page
            my $url_detail = $mech->find_link( url_regex => qr/RecordId=/ )->url();
            $mech->get($url_detail);
            my $path_detail = $path_close . '/detail_' . $key . '.html';
            $mech->save_content( $path_detail, binmode => ':encoding(utf8)' );

            if ( $select eq "1" && ( $cl_apk ne "" ) ) {
               # print "Your Select Is: 1. Update Bug<br>";

                # Sumbit Update
                &submitUpdate( $tt_id, $cl, $apk, $device_web, $branch, $mech, $path_close, $cl_apk );
            }
            elsif ( $select eq "2" ) {

                # Assign Bug
               # print "Your Select Is: 2. Assign To Developer ********\n\n";
                if ( $mech->content() =~ /TransitionId.8/ ) {
                  #  print "******** Assign To Developer ********\n\n";
                    &assignToDeveloper( $tt_id, $mech, $path_close);
                }
                else {
                  #  print "! Already Assigned To Developer ********\n\n";
                }
            }
            elsif ( $select eq "3" && ( $cl_apk ne "" && $tag ne "" ) ) {
                #print "Your Select Is: 3. Assign to Manager & Verify Close Bug ********\n\n";

                # Assign Bug
                if ( $mech->content() =~ /TransitionId.8/ ) {
                #    print "******** Assign To Developer ********\n\n";
                    &assignToDeveloper( $tt_id, $mech, $path_close);
                }
                else {
                #    print "! Already Assigned To Developer ********\n\n";
                }

                # Verify Bug
                #print "******** Verify Bug Fix ********\n\n";
                &verifyBugFix( $tt_id, $cl, $apk, $tag, $device_web, $branch, $mech, $path_close, $cl_apk);
            }
            else {
                #print "! Do nothing********\n\n";
            }

        }
    }
}

sub submitForm() {
    ( my $tt_id, my $cl, my $apk, my $tag, my $device, my $branch, my $mech, my $form_button, my $path, my $path_submit, my %hash_fill ) = @_;

    # Goto Form-Fill Page
    my $res = $mech->submit_form(
        form_name => 'ViewForm',
        button    => $form_button
    );

    &printFile( $res->content(), $path );

    # Break Assign Lock
    if ( $res->content() =~ /Break Lock/ ) {
        my $res_break_lock = $mech->submit_form(
            form_name => 'BreakLockForm',
            button    => 'Break'
        );

        &printFile( $res_break_lock->content(), $path );
    }

    # Submit Update
    $mech->form_name('TransitionForm');

    my %hash_select = ();
    open( PATH, $path ) or die $!;
    my @path = <PATH>;
    close PATH;

    # Check repeat update
    my $flag = 1;
    if ( $form_button eq 'TransitionId.1' or $form_button eq 'TransitionId.19') {
        foreach (@path) {
            if (/id=\"F1112\".*(ChangeLink.*?)<.*?(APK Version.*?)<.*?Add your comment/) {
                foreach my $key ( keys %hash_fill ) {

                    # print $1.", ".$2."<br>";
                    if ( $1 . "\n" . $2 eq $hash_fill{$key} ) {
                        #print "Yep, Repeat Update - Do nothing\n\n";
                        $flag = 0;
                    }
                }

                last;
            }
        }
    }

    if(!$flag && $form_button eq 'TransitionId.19') {
        $flag = 1;
        $hash_fill{'H1112' => ''};
    }

    if ($flag) {
        if($form_button ne 'TransitionId.8') {
                print "SF_Success$tt_id & $tag & $apk & $cl & $device & $branch";
        }
        foreach (@path) {
            if (/name=\"(\w\d+?)\".*value=\"(\d+?)\".* selected/) {
                $hash_select{$1} = $2;
            }
        }
        foreach my $key ( keys %hash_select ) {
            $mech->select( $key, $hash_select{$key} );
        }

        foreach my $key ( keys %hash_fill ) {
            $mech->field( $key, $hash_fill{$key}, 1 );
        }

        #     my $res_submit = $mech->click('#TransitionForm_ok');
        #     my $content    = $res_submit->content();
        #     &printFile( $content, $path_submit );
    }
}

# Verify Bug Fix
sub verifyBugFix() {
    ( my $tt_id, my $cl, my $apk, my $tag, my $device, my $branch, my $mech, my $path, my $cl_apk) = @_;

    my %hash_fill = (
        'F233'  => $developer,
        'F234'  => $rd_manager,
        'H1112' => $cl_apk,
        'F317'  => $tag
    );

    &submitForm( $tt_id, $cl, $apk, $tag, $device, $branch, $mech, 'TransitionId.19', $path . '/verify.html', $path . '/verify_submit.html', %hash_fill );
}

# Assign To Developer
sub assignToDeveloper() {
    ( my $tt_id, my $mech, my $path ) = @_;

    my %hash_fill = (
        'F233' => $developer

          #'F234' => $rd_manager
    );

    &submitForm( $tt_id, "", "", "", "", "", $mech, 'TransitionId.8', $path . '/assign.html', $path . '/assign_submit.html', %hash_fill );
}

# Update
sub submitUpdate() {
    ( my $tt_id, my $cl, my $apk, my $device, my $branch, my $mech, my $path, my $cl_apk) = @_;

    my %hash_fill = (
        'F233'  => $developer,
        'F234'  => $rd_manager,
        'H1112' => $cl_apk
    );

    &submitForm( $tt_id, $cl, $apk, "", $device, $branch, $mech, 'TransitionId.1', $path . '/update.html', $path . '/update_submit.html', %hash_fill );
}

sub getTTCloseHash() {
    ( my $path, my %hash ) = @_;
    open( TAG, $path ) or die $!;
    my @tag = <TAG>;
    shift @tag;
    shift @tag;
    my %hash_tt = ();
    foreach my $t (@tag) {
        chomp $t;
        my @ele = split( ',', $t );
        $ele[3] =~ s/ & /&/g;
        $ele[3] =~ s/ /&/g;
        my @tt_id = split( '&', $ele[3] );

        foreach my $id (@tt_id) {
            $hash{$id} =~ s/ &.*//;
            if ( $hash{$id} ne "" && $ele[0] =~ /$hash{$id}/ ) {
                $hash_tt{$id} = "$ele[0],$ele[1],$ele[2],$ele[4]";
            }
            elsif ( $hash_tt{$id} eq "" ) {
                $hash_tt{$id} = 1;
            }
        }
    }
    close TAG;
    return %hash_tt;
}

sub getWebHash() {
    ( my $path_parse, my $path_close ) = @_;

    # Extract table
    use HTML::TableExtract qw(tree);
    my $te = HTML::TableExtract->new( attribs => { name => "ReportOutput" } );
    $te->parse_file($path_parse);

    my %hash  = ();
    my $value = "";
    foreach my $table ( $te->tables ) {
        my $table_tree = $table->tree;
        my $t_line     = $table_tree->as_HTML;

        printFile2( $t_line . "\n\n", $path_close . "/tables.html" );
        if ( $t_line =~ /projName0"> TopicApp/ or $t_line =~ /projName0\"?> Application/ ) {
            $value = $topicApp;
        }
        elsif ( $t_line =~ /projName0\"?> (\w+[\s\w\/\(\)-]*?) <\/span><\/td><\/tr>/ ) {
            $value = $1;
        }
        else {
            $value = "others";
        }

        my @all_tt = $t_line =~ /RecordId.*?> (\d+?) </g;
        foreach (@all_tt) {
            $hash{$_} = $value;
        }
    }

    return %hash;
}

sub printHash() {
    ( my $path, my %hash ) = @_;

    # sort by value
    foreach my $key ( sort { $hash{$a} cmp $hash{$b} } keys %hash ) {
        printFile2( $key . "," . $hash{$key} . "\n", $path );
    }
}

sub printCSV() {
    ( my $path, my @field ) = @_;
    open( FH, '>>' . $path ) or die $!;
    print FH join( ",", @field ), "\n";
    close FH;
}

sub printFile() {
    ( my $content, my $file ) = @_;
    open( FH, '>' . $file ) or die $!;
    print FH $content;
    close FH;
}

sub printFile2() {
    ( my $content, my $file ) = @_;
    open( FH, '>>' . $file ) or die $!;
    print FH $content;
    close FH;
}

